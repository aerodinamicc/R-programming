floor(dat)
}
}
evaluate(sum, c(4,5,10))
evaluate <- function(func){
func <- function(dat){
sum(dat)
median(dat)
floor(dat)
}
}
evaluate(sum, c(4,5,10))
evaluate <- function(func, dat){
func <- function(dat){
sum(dat)
median(dat)
floor(dat)
}
}
evaluate(sum, c(4,5,10))
x <- evaluate(sum, c(4,5,10))
View(x)
View(x)
View(x)
add_two_numbers <- function(num1, num2){
num1 + num2
}
multiply_two_numbers <- function(num1, num2){
num1 * num2
}
some_function <- function(func){
func(2, 4)
add_two_numbers <- function(num1, num2){
num1 + num2
}
multiply_two_numbers <- function(num1, num2){
num1 * num2
}
some_function <- function(func){
func(2, 4)
}
multiply_two_numbers(some_function)
some_function(multiply_two_numbers)
some_function
func
dat
evaluate
evaluate <- function(func, dat){
func <- function(dat){
sum(dat)
median(dat)
floor(dat)
}
}
evaluate(sum, c(5,6))
x <- evaluate(sum, c(5,6))
View(x)
evaluate <- function(func, dat){
dat <- function(func){
sum(dat)
median(dat)
floor(dat)
}
}
x <- evaluate(sum, c(5,6))
View(x)
evaluate <- function(func, dat){
sum(dat)
median(dat)
floor(dat)
}
evaluate(sum, c(5,6))
evaluate <- function(dat){
sum(dat)
}
evaluate(sum, c(5,6))
evaluate(c(5,6))
evaluate <- function(dat){
sum(dat)
median(dat)
floor(dat)
}
evaluate(c(5,6,7,8))
evaluate <- function(dat){
sum(dat)
median(dat)
floor(dat)
}
evaluate(c(5,6,7,8))
evaluate(5,6,7,8)
evaluate(c(5,6,7,8))
evaluate <- function(dat){
median(dat)
}
evaluate(c(5,6,7,8))
evaluate <- function(dat){
print(median(dat))
}
evaluate(c(5,6,7,8))
evaluate <- function(dat){
print(sum(dat))
print(median(dat))
print(floor(dat))
}
evaluate(c(5,6,7,8))
evaluate <- function(func, dat){
func <- function(dat){
print(sum(dat))
print(median(dat))
print(floor(dat))
}
}
evaluate(sum, c(4,5,6,7))
evaluate <- function(func, dat){
dat <- function(func){
print(sum(dat))
print(median(dat))
print(floor(dat))
}
}
evaluate(sum, c(4,5,6,7))
evaluate <- function(dat){
c(sum(dat),
median(dat),
floor(dat))
}
evaluate(c(4,5,6,7))
arithmetic <- function(myfunc, arg1, arg2) { myfunc(arg1, arg2) }
add <- function(x, y) { return(x + y) }
subtract <- function(x, y) { return(x - y) }
multiply <- function(x, y) { return(x * y) }
divide <- function(x, y) { return(x / y) }
arithmetic(substract, 4 , 2)
arithmetic(subtract, 4 , 2)
evaluate <- function(func, dat) { func(dat) }
sum <- function(dat) { return(sum(x + y) }
median <- function(dat) { return(median(dat) }
floor <- function(dat) { return(floor(dat)) }
evaluate <- function(func, dat) { func(dat) }
sum <- function(dat) { return(sum(dat) }
median <- function(dat) { return(median(dat) }
floor <- function(dat) { return(floor(dat)) }
evaluate(sum, c(4 , 2)
evaluate(sum, c(4 , 2))
evaluate <- function(func, dat) {
func(dat)
}
evaluate(sum, c(4,5,6,7,89,9))
evaluate(median, c(4,5,6,7,89,9))
evaluate(mean, c(4,5,6,7,89,9))
evaluate(floor, c(4,5,6,7,89,9))
evaluate(floor, 11.1
evaluate(floor, 11.1)
evaluate(floor, 11,1)
evaluate(floor, 11.1)
?floor
11.1%%
11.1%%1
11.1%%0.1
11.1%%11
evaluate <- function(func, dat) {
func(dat)}
sum <- function(dat) {sum(dat)}
median <- function(dat) {median(dat)}
floor <- function(dat) {floor(dat)}
floor <- function(dat) {floor(dat)}
evaluate(sum, c(4,5,6,7,89,9))
evaluate <- function(func, dat) {
func(dat){
sum <- function(dat) {sum(dat)}
median <- function(dat) {median(dat)}
floor <- function(dat) {floor(dat)}
}
evaluate <- function(func, dat) {
func(dat){
sum <- function(dat) {sum(dat)}
median <- function(dat) {median(dat)}
floor <- function(dat) {floor(dat)}
}
}
median(c(7, 40, 9))
median(7, 40, 9)
?median
mean(c(7, 40, 9))
median(c(7, 40, 9))
median(1:4)
median(1:4)
median(c(7, 40, 9))
?quantile
c <- matrix(rnorm(20, sd=5),4,4)
quantile(c, probs = c(0.25, 0.75))
apply(x, 1, quantile, probs=c(0.25, 0.75))
apply(c, 1, quantile, probs=c(0.25, 0.75))
list(rep(1:4), rep(2:3), rep(3:2), rep(4:1))
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
mapply(rep, 1:4, 4:1)
?mapply
?gl
swirl(0)
swirl()
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
class(f;ags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(cls_flags, class, simplify = TRUE)
sapply(flags, class, simplify = TRUE)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[11:17]
flags_colors <- flags[,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes[,19:23]
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat < sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(flag_shapes)
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags_colors, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
setwd("G:/R/Coursera/hospital")
outcomedf <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
causes <- c("heart attack", "heart failure", "pneumonia")
#points out the respective columns for the three outcomes when looked up in outcomedf
columns <- c("heart attack"=11, "heart failure"=17, "pneumonia"=23)
tempdf <- outcomedf[which(outcomedf$State == state),c(2,7,as.numeric(columns[1])]
#renaming the columns for better visibility
names(tempdf) <- c("Hospital", "State", "Outcome")
#leaves only the complete cases in finaldf
finaldf <- tempdf[complete.cases(tempdf),]
#orders the rows based on the two arguments. Note that the "-" sign could be used for decreasing order
finaldf <- finaldf[order(finaldf$Outcome, finaldf$Hospital),]
x <- split(finaldf, finaldf$State)
setwd("G:/R/Coursera/hospital")
outcomedf <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
causes <- c("heart attack", "heart failure", "pneumonia")
#points out the respective columns for the three outcomes when looked up in outcomedf
columns <- c("heart attack"=11, "heart failure"=17, "pneumonia"=23)
tempdf <- outcomedf[which(outcomedf$State == state),c(2,7,as.numeric(columns[1]),]
#renaming the columns for better visibility
names(tempdf) <- c("Hospital", "State", "Outcome")
#leaves only the complete cases in finaldf
finaldf <- tempdf[complete.cases(tempdf),]
#orders the rows based on the two arguments. Note that the "-" sign could be used for decreasing order
finaldf <- finaldf[order(finaldf$Outcome, finaldf$Hospital),]
x <- split(finaldf, finaldf$State)
setwd("G:/R/Coursera/hospital")
outcomedf <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
causes <- c("heart attack", "heart failure", "pneumonia")
#points out the respective columns for the three outcomes when looked up in outcomedf
columns <- c("heart attack"=11, "heart failure"=17, "pneumonia"=23)
tempdf <- outcomedf[which(outcomedf$State == state),c(2,7,as.numeric(columns[1]))]
#renaming the columns for better visibility
names(tempdf) <- c("Hospital", "State", "Outcome")
#leaves only the complete cases in finaldf
finaldf <- tempdf[complete.cases(tempdf),]
#orders the rows based on the two arguments. Note that the "-" sign could be used for decreasing order
finaldf <- finaldf[order(finaldf$Outcome, finaldf$Hospital),]
x <- split(finaldf, finaldf$State)
setwd("G:/R/Coursera/hospital")
outcomedf <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
causes <- c("heart attack", "heart failure", "pneumonia")
#points out the respective columns for the three outcomes when looked up in outcomedf
columns <- c("heart attack"=11, "heart failure"=17, "pneumonia"=23)
tempdf <- outcomedf[which("CA"),c(2,7,as.numeric(columns[1]))]
#renaming the columns for better visibility
names(tempdf) <- c("Hospital", "State", "Outcome")
#leaves only the complete cases in finaldf
finaldf <- tempdf[complete.cases(tempdf),]
#orders the rows based on the two arguments. Note that the "-" sign could be used for decreasing order
finaldf <- finaldf[order(finaldf$Outcome, finaldf$Hospital),]
x <- split(finaldf, finaldf$State)
setwd("G:/R/Coursera/hospital")
outcomedf <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
causes <- c("heart attack", "heart failure", "pneumonia")
#points out the respective columns for the three outcomes when looked up in outcomedf
columns <- c("heart attack"=11, "heart failure"=17, "pneumonia"=23)
tempdf <- outcomedf[which(outcomedf$State == "CA"),c(2,7,as.numeric(columns[1]))]
#renaming the columns for better visibility
names(tempdf) <- c("Hospital", "State", "Outcome")
#leaves only the complete cases in finaldf
finaldf <- tempdf[complete.cases(tempdf),]
#orders the rows based on the two arguments. Note that the "-" sign could be used for decreasing order
finaldf <- finaldf[order(finaldf$Outcome, finaldf$Hospital),]
print (finaldf[4,])
setwd("G:/R/Coursera/hospital")
outcomedf <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
causes <- c("heart attack", "heart failure", "pneumonia")
#points out the respective columns for the three outcomes when looked up in outcomedf
columns <- c("heart attack"=11, "heart failure"=17, "pneumonia"=23)
tempdf <- outcomedf[which(outcomedf$State == "CA"),c(2,7,as.numeric(columns[1]))]
#renaming the columns for better visibility
names(tempdf) <- c("Hospital", "State", "Outcome")
#leaves only the complete cases in finaldf
finaldf <- tempdf[complete.cases(tempdf),]
#orders the rows based on the two arguments. Note that the "-" sign could be used for decreasing order
finaldf <- finaldf[order(finaldf$Outcome, finaldf$Hospital),]
print (finaldf[1,])
setwd("G:/R/Coursera/hospital")
outcomedf <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
causes <- c("heart attack", "heart failure", "pneumonia")
#points out the respective columns for the three outcomes when looked up in outcomedf
columns <- c("heart attack"=11, "heart failure"=17, "pneumonia"=23)
rankall <- function(outcome, num){
if (outcome %in% causes == FALSE){
stop("invalid outcome")
} else if (outcome %in% causes){
#with the last part of the following code the arg of the function is used to point out the right column from outcomedf
tempdf <- outcomedf[,c(2,7,as.numeric(columns[outcome]))]
#renaming the columns for better visibility
names(tempdf) <- c("Hospital", "State", "Outcome")
#leaves only the complete cases in finaldf
finaldf <- tempdf[complete.cases(tempdf),]
#orders the rows based on the two arguments. Note that the "-" sign could be used for decreasing order
finaldf <- finaldf[order(finaldf$Outcome, finaldf$Hospital),]
#split
x <- split(finaldf, finaldf$State)
# checks whether you've mentioned best/worst/or an integer
if (num == "best"){
num <- 1
}else if (num == "worst"){
num <- nrow(finaldf)
}
str(x)
}
setwd("G:/R/Coursera/hospital")
outcomedf <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
causes <- c("heart attack", "heart failure", "pneumonia")
#points out the respective columns for the three outcomes when looked up in outcomedf
columns <- c("heart attack"=11, "heart failure"=17, "pneumonia"=23)
rankall <- function(outcome, num){
if (outcome %in% causes == FALSE){
stop("invalid outcome")
} else if (outcome %in% causes){
#with the last part of the following code the arg of the function is used to point out the right column from outcomedf
tempdf <- outcomedf[,c(2,7,as.numeric(columns[outcome]))]
#renaming the columns for better visibility
names(tempdf) <- c("Hospital", "State", "Outcome")
#leaves only the complete cases in finaldf
finaldf <- tempdf[complete.cases(tempdf),]
#orders the rows based on the two arguments. Note that the "-" sign could be used for decreasing order
finaldf <- finaldf[order(finaldf$Outcome, finaldf$Hospital),]
#split
x <- split(finaldf, finaldf$State)
}
# checks whether you've mentioned best/worst/or an integer
if (num == "best"){
num <- 1
}else if (num == "worst"){
num <- nrow(finaldf)
}
str(x)
}
rankall("heart attack", 2)
setwd("G:/R/Coursera/hospital")
outcomedf <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
causes <- c("heart attack", "heart failure", "pneumonia")
#points out the respective columns for the three outcomes when looked up in outcomedf
columns <- c("heart attack"=11, "heart failure"=17, "pneumonia"=23)
rankall <- function(outcome, num){
if (outcome %in% causes == FALSE){
stop("invalid outcome")
} else if (outcome %in% causes){
#with the last part of the following code the arg of the function is used to point out the right column from outcomedf
tempdf <- outcomedf[,c(2,7,as.numeric(columns[outcome]))]
#renaming the columns for better visibility
names(tempdf) <- c("Hospital", "State", "Outcome")
#leaves only the complete cases in finaldf
finaldf <- tempdf[complete.cases(tempdf),]
#orders the rows based on the two arguments. Note that the "-" sign could be used for decreasing order
finaldf <- finaldf[order(finaldf$Outcome, finaldf$Hospital),]
#split
x <- split(finaldf, finaldf$State)
}
# checks whether you've mentioned best/worst/or an integer
if (num == "best"){
num <- 1
}else if (num == "worst"){
num <- nrow(finaldf)
}
summary(x)
}
rankall("heart attack", 2)
?tapply
setwd("G:/R/Coursera/hospital")
outcomedf <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
causes <- c("heart attack", "heart failure", "pneumonia")
#points out the respective columns for the three outcomes when looked up in outcomedf
columns <- c("heart attack"=11, "heart failure"=17, "pneumonia"=23)
rankall <- function(outcome, num){
if (outcome %in% causes == FALSE){
stop("invalid outcome")
} else if (outcome %in% causes){
#with the last part of the following code the arg of the function is used to point out the right column from outcomedf
tempdf <- outcomedf[,c(2,7,as.numeric(columns[outcome]))]
#renaming the columns for better visibility
names(tempdf) <- c("Hospital", "State", "Outcome")
#leaves only the complete cases in finaldf
finaldf <- tempdf[complete.cases(tempdf),]
#orders the rows based on the two arguments. Note that the "-" sign could be used for decreasing order
finaldf <- finaldf[order(finaldf$Outcome, finaldf$Hospital),]
#split
x <- split(finaldf, finaldf$State)
}
# checks whether you've mentioned best/worst/or an integer
if (num == "best"){
num <- 1
}else if (num == "worst"){
num <- nrow(finaldf)
}
lapply(x, function(y) y <- x[num])
}
rankall("heart attack", 2)
setwd("G:/R/Coursera/hospital")
outcomedf <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
causes <- c("heart attack", "heart failure", "pneumonia")
#points out the respective columns for the three outcomes when looked up in outcomedf
columns <- c("heart attack"=11, "heart failure"=17, "pneumonia"=23)
rankall <- function(outcome, num){
if (outcome %in% causes == FALSE){
stop("invalid outcome")
} else if (outcome %in% causes){
#with the last part of the following code the arg of the function is used to point out the right column from outcomedf
tempdf <- outcomedf[,c(2,7,as.numeric(columns[outcome]))]
#renaming the columns for better visibility
names(tempdf) <- c("Hospital", "State", "Outcome")
#leaves only the complete cases in finaldf
finaldf <- tempdf[complete.cases(tempdf),]
#orders the rows based on the two arguments. Note that the "-" sign could be used for decreasing order
finaldf <- finaldf[order(finaldf$Outcome, finaldf$Hospital),]
#split
x <- split(finaldf, finaldf$State)
}
# checks whether you've mentioned best/worst/or an integer
if (num == "best"){
num <- 1
}else if (num == "worst"){
num <- nrow(finaldf)
}
lapply(x, function(y) y <- x[num,])
}
rankall("heart attack", 2)
?lapply
finaldf <- finaldf[order(finaldf$Outcome, finaldf$Hospital),]
x <- split(finaldf, finaldf$State)
lapplied <- lapply(x,"[",1)
str(lapplied)
lapplied
hos <- lapply(lapplied,"[[",num)
sta <- names(lapplied)
hos <- lapply(lapplied,"[[",num)
nrow(x)
length(x)
summary(x)
str(x)
nrow(x$Hospotal)
nrow(x$Hospital)
outcomedf <- read.csv("outcome-of-care-measures.csv", na.strings = "Not Available", stringsAsFactors = FALSE)
causes <- c("heart attack", "heart failure", "pneumonia")
#points out the respective columns for the three outcomes when looked up in outcomedf
columns <- c("heart attack"=11, "heart failure"=17, "pneumonia"=23)
outcome <- 1
tempdf <- outcomedf[,c(2,7,as.numeric(columns[outcome]))]
#renaming the columns for better visibility
names(tempdf) <- c("Hospital", "State", "Outcome")
#leaves only the complete cases in finaldf
finaldf <- tempdf[complete.cases(tempdf),]
#orders the rows based on the two arguments. Note that the "-" sign could be used for decreasing order
finaldf <- finaldf[order(finaldf$Outcome, finaldf$Hospital),]
#split
x <- split(finaldf, finaldf$State)
str(x)
vectorA <- c(1:6)
lapply(vectorA, sqrt)
m <- lapply(vectorA, sqrt)
class(m)
m
m[2]
m[1]
m[4]
m[3]
m[5]
m[6]
m[[6]]
unlist(m)
c <-unlist(m)
class(c)
c[2]
lapply(x, function(elem) )
lapply(x, function(elem)
